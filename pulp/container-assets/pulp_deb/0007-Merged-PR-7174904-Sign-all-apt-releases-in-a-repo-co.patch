From 90ac39a536d874356f2c88e9658cf6f1f15d8fc8 Mon Sep 17 00:00:00 2001
From: Stephen Herr <stephenherr@microsoft.com>
Date: Mon, 28 Nov 2022 18:23:27 +0000
Subject: [PATCH] Merged PR 7174904: Sign all apt releases in a repo
 concurrently

Sign all apt releases in a repo concurrently.

This PR splits the previous `_ReleaseHelper.finish()` function into three parts, `save_unsigned_metadata`, `sign_metadata`, and `save_signed_metadata`, and then calls them in order, doing the signing concurrently.

I've tested in PPE now by syncing the azure-cli repo to PPE. Before this change running a publish task took **45 minutes**. After this change was applied signing takes about **4 minutes**. A 10x speedup is in line with expectations, given that there are 16 distros in that repo and not _everything_ is just sitting around waiting for signing. I've increase the polling to the signer container from once a minute to every 10 seconds to help with this.

There was a small setback the first time I tried it where the process hit the cpu/memory constraints and died. Those have been increase appropriately to ensure a good minimum for concurrently signing big apt repos, and there's actually no limit any more so even if it goes above that it won't die unless the node runs out of space.

Bug/PR filed upstream: https://github.com/pulp/pulp_deb/issues/682

Related work items: #16101470
---
 pulp_deb/app/tasks/publishing.py | 59 +++++++++++++++++++++++---------
 1 file changed, 43 insertions(+), 16 deletions(-)

diff --git a/pulp_deb/app/tasks/publishing.py b/pulp_deb/app/tasks/publishing.py
index c054ece..9130c8a 100644
--- a/pulp_deb/app/tasks/publishing.py
+++ b/pulp_deb/app/tasks/publishing.py
@@ -1,3 +1,4 @@
+import asyncio
 import os
 import shutil
 from contextlib import suppress
@@ -134,6 +135,7 @@ def publish(repository_version_pk, simple=False, structured=False, signing_servi
                 release_helper.finish()
 
             if structured:
+                release_helpers = []
                 for release in Release.objects.filter(
                     pk__in=repo_version.content.order_by("-pulp_created"),
                 ):
@@ -175,11 +177,21 @@ def publish(repository_version_pk, simple=False, structured=False, signing_servi
                         release_helper.components[prc.release_component.component].add_package(
                             prc.package
                         )
-                    release_helper.finish()
+
+                    release_helper.save_unsigned_metadata()
+                    release_helpers.append(release_helper)
+
+                asyncio.run(_concurrently_sign_metadata(release_helpers))
+                for release_helper in release_helpers:
+                    release_helper.save_signed_metadata()
 
     log.info(_("Publication: {publication} created").format(publication=publication.pk))
 
 
+async def _concurrently_sign_metadata(release_helpers):
+    await asyncio.gather(*[x.sign_metadata() for x in release_helpers])
+
+
 class _ComponentHelper:
     def __init__(self, parent, component):
         self.parent = parent
@@ -296,32 +308,47 @@ class _ReleaseHelper:
                 )
 
     def finish(self):
+        """
+        You must *either* call finish (as the simple publications still do), or you must call
+        save_unsigned_metadata, sign_metadata, and save_signed_metadata, in order. The benefit of
+        doing it the other way is that you can sign the metadata for all releases concurrently.
+        """
+        self.save_unsigned_metadata()
+        asyncio.run(self.sign_metadata())
+        self.save_signed_metadata()
+
+    def save_unsigned_metadata(self):
         # Publish Packages files
         for component in self.components.values():
             component.finish()
         # Publish Release file
         self.release["Components"] = " ".join(self.components.keys())
-        release_dir = os.path.join("dists", self.dists_subfolder)
-        os.makedirs(release_dir, exist_ok=True)
-        release_path = os.path.join(release_dir, "Release")
-        with open(release_path, "wb") as release_file:
+        self.release_dir = os.path.join("dists", self.dists_subfolder)
+        os.makedirs(self.release_dir, exist_ok=True)
+        self.release_path = os.path.join(self.release_dir, "Release")
+        with open(self.release_path, "wb") as release_file:
             self.release.dump(release_file)
         release_metadata = PublishedMetadata.create_from_file(
             publication=self.publication,
-            file=File(open(release_path, "rb")),
+            file=File(open(self.release_path, "rb")),
         )
         release_metadata.save()
+
+    async def sign_metadata(self):
+        self.signed = {"signatures": {}}
         if self.signing_service:
-            signed = self.signing_service.sign(release_path)
-            for signature_file in signed["signatures"].values():
-                file_name = os.path.basename(signature_file)
-                relative_path = os.path.join(release_dir, file_name)
-                metadata = PublishedMetadata.create_from_file(
-                    publication=self.publication,
-                    file=File(open(signature_file, "rb")),
-                    relative_path=relative_path,
-                )
-                metadata.save()
+            self.signed = await self.signing_service.asign(self.release_path)
+
+    def save_signed_metadata(self):
+        for signature_file in self.signed["signatures"].values():
+            file_name = os.path.basename(signature_file)
+            relative_path = os.path.join(self.release_dir, file_name)
+            metadata = PublishedMetadata.create_from_file(
+                publication=self.publication,
+                file=File(open(signature_file, "rb")),
+                relative_path=relative_path,
+            )
+            metadata.save()
 
 
 def _zip_file(file_path):
-- 
2.31.1

