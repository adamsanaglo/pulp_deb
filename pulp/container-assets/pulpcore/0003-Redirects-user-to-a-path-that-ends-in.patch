From 9d85abf914a7c301b6262f6eb2420d14efd54cc7 Mon Sep 17 00:00:00 2001
From: Dennis Kliban <dkliban@redhat.com>
Date: Mon, 5 Dec 2022 09:04:57 -0500
Subject: [PATCH 3/3] Redirects user to a path that ends in /

This patch returns a 301 redirect when a requested path does not end in a / but should end in a /.

fixes: #3173
---
 CHANGES/3173.feature        |  1 +
 pulpcore/content/handler.py | 57 +++++++++++++++++++++++--------------
 2 files changed, 37 insertions(+), 21 deletions(-)
 create mode 100644 CHANGES/3173.feature

diff --git a/CHANGES/3173.feature b/CHANGES/3173.feature
new file mode 100644
index 000000000..33087e9f2
--- /dev/null
+++ b/CHANGES/3173.feature
@@ -0,0 +1 @@
+Content app now redirects requests without a trailing slash to a path with the trailing slash. 
diff --git a/pulpcore/content/handler.py b/pulpcore/content/handler.py
index eff3f9a90..2a6eab898 100644
--- a/pulpcore/content/handler.py
+++ b/pulpcore/content/handler.py
@@ -9,6 +9,7 @@ from aiohttp.web import FileResponse, StreamResponse, HTTPOk
 from aiohttp.web_exceptions import (
     HTTPForbidden,
     HTTPFound,
+    HTTPMovedPermanently,
     HTTPNotFound,
     HTTPRequestRangeNotSatisfiable,
 )
@@ -278,6 +279,9 @@ class Handler:
             DistroListings: when multiple matches are possible.
             PathNotResolved: when not matched.
         """
+        path_ends_in_slash = path.endswith("/")
+        if not path_ends_in_slash:
+            path = f"{path}/"
         base_paths = cls._base_paths(path)
         distro_model = cls.distribution_model or Distribution
         try:
@@ -292,8 +296,11 @@ class Handler:
             if path.rstrip("/") in base_paths:
                 distros = distro_model.objects.filter(base_path__startswith=path)
                 if distros.count():
-                    raise DistroListings(path=path, distros=distros)
-
+                    if path_ends_in_slash:
+                        raise DistroListings(path=path, distros=distros)
+                    else:
+                        # The list of a subset of distributions was requested without a trailing /
+                        raise HTTPMovedPermanently(f"{settings.CONTENT_PATH_PREFIX}{path}")
             log.debug(
                 _("Distribution not matched for {path} using: {base_paths}").format(
                     path=path, base_paths=base_paths
@@ -444,10 +451,7 @@ class Handler:
                     directory_list.add(name)
                     dates.update({name: ca.pulp_created})
 
-            if directory_list:
-                return directory_list, dates
-            else:
-                raise PathNotResolved(path)
+            return directory_list, dates
 
         return await sync_to_async(list_directory_blocking)()
 
@@ -484,7 +488,6 @@ class Handler:
             :class:`aiohttp.web.StreamResponse` or :class:`aiohttp.web.FileResponse`: The response
                 streamed back to the client.
         """
-
         distro = await sync_to_async(self._match_distribution)(path)
 
         await sync_to_async(self._permit)(request, distro)
@@ -493,6 +496,10 @@ class Handler:
         rel_path = rel_path[len(distro.base_path) :]
         rel_path = rel_path.lstrip("/")
 
+        if rel_path == "" and not path.endswith("/"):
+            # The root of a distribution base_path was requested without a slash
+            raise HTTPMovedPermanently(f"{request.path}/")
+
         content_handler_result = await sync_to_async(distro.content_handler)(rel_path)
         if content_handler_result is not None:
             return content_handler_result
@@ -529,25 +536,33 @@ class Handler:
             await sync_to_async(get_latest_publication_or_version_blocking)()
 
         if publication:
-            if rel_path == "" or rel_path[-1] == "/":
-                try:
-                    index_path = "{}index.html".format(rel_path)
-
-                    await sync_to_async(publication.published_artifact.get)(
-                        relative_path=index_path
-                    )
+            ends_in_slash = rel_path == "" or rel_path.endswith("/")
+            if ends_in_slash is False:
+                rel_path = f"{rel_path}/"
+            try:
+                index_path = "{}index.html".format(rel_path)
 
-                    rel_path = index_path
-                    headers = self.response_headers(rel_path)
-                except ObjectDoesNotExist:
-                    dir_list, dates = await self.list_directory(None, publication, rel_path)
-                    dir_list.update(
-                        await sync_to_async(distro.content_handler_list_directory)(rel_path)
-                    )
+                await sync_to_async(publication.published_artifact.get)(relative_path=index_path)
+                if ends_in_slash is False:
+                    # index.html found, but user didn't specify a trailing slash
+                    raise HTTPMovedPermanently(f"{request.path}/")
+                rel_path = index_path
+                headers = self.response_headers(rel_path)
+            except ObjectDoesNotExist:
+                dir_list, dates = await self.list_directory(None, publication, rel_path)
+                dir_list.update(
+                    await sync_to_async(distro.content_handler_list_directory)(rel_path)
+                )
+                if dir_list and ends_in_slash is False:
+                    # Directory can be listed, but user did not specify trailing slash
+                    raise HTTPMovedPermanently(f"{request.path}/")
+                elif dir_list:
                     return HTTPOk(
                         headers={"Content-Type": "text/html"},
                         body=self.render_html(dir_list, path=request.path, dates=dates),
                     )
+            if ends_in_slash is False:
+                rel_path = rel_path[:-1]
 
             # published artifact
             try:
-- 
2.25.1

