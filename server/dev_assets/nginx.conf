upstream pmcserver {
    server pmcserver:8000; # The pmcserver container
}
upstream pulpcontent {
    server pulp-content:24816; # The pulp-content container
}

# Instruct nginx to publish logs to stderr / stdout so kubernetes can capture them.
error_log  stderr warn;
access_log  /dev/stdout main;
log_format custom 'nginx-api [$time_local] - [$http_x_correlation_id]: "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';

server { # Server to handle incoming requests for the api
    listen              8082;
    server_name         pmcserver;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    client_max_body_size 3G;

    location /nginx_status {
        access_log off;
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }

    location / {
        access_log /dev/stdout custom;
        proxy_pass http://pmcserver;
    }
}

server { # Server to handle incoming requests for the content
    listen              8083;
    server_name         pulpcontent;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    client_max_body_size 3G;

    location ~ ^/config/ {
      proxy_pass http://pulpcontent;
    }

    location ~ .*/Packages/.*\.rpm$ {
      proxy_pass http://pulpcontent;
    }

    location ~ .*\.rpm$ {
      rewrite ^/(.*)/([Mm][^/]+\.rpm)$ /$1/Packages/m/$2 last;
      rewrite ^/(.*)/([Pp][^/]+\.rpm)$ /$1/Packages/p/$2 last;
      rewrite ^/(.*)/([Dd][^/]+\.rpm)$ /$1/Packages/d/$2 last;
      rewrite ^/(.*)/([Ll][^/]+\.rpm)$ /$1/Packages/l/$2 last;
      rewrite ^/(.*)/([Cc][^/]+\.rpm)$ /$1/Packages/c/$2 last;
      rewrite ^/(.*)/([Aa][^/]+\.rpm)$ /$1/Packages/a/$2 last;
      rewrite ^/(.*)/([Kk][^/]+\.rpm)$ /$1/Packages/k/$2 last;
      rewrite ^/(.*)/([Rr][^/]+\.rpm)$ /$1/Packages/r/$2 last;
      rewrite ^/(.*)/([Gg][^/]+\.rpm)$ /$1/Packages/g/$2 last;
      rewrite ^/(.*)/([Ss][^/]+\.rpm)$ /$1/Packages/s/$2 last;
      rewrite ^/(.*)/([Oo][^/]+\.rpm)$ /$1/Packages/o/$2 last;
      rewrite ^/(.*)/([Qq][^/]+\.rpm)$ /$1/Packages/q/$2 last;
      rewrite ^/(.*)/([Hh][^/]+\.rpm)$ /$1/Packages/h/$2 last;
      rewrite ^/(.*)/([Nn][^/]+\.rpm)$ /$1/Packages/n/$2 last;
      rewrite ^/(.*)/([Bb][^/]+\.rpm)$ /$1/Packages/b/$2 last;
      rewrite ^/(.*)/([Tt][^/]+\.rpm)$ /$1/Packages/t/$2 last;
      rewrite ^/(.*)/([Ee][^/]+\.rpm)$ /$1/Packages/e/$2 last;
      rewrite ^/(.*)/([Ff][^/]+\.rpm)$ /$1/Packages/f/$2 last;
      rewrite ^/(.*)/([Ii][^/]+\.rpm)$ /$1/Packages/i/$2 last;
      rewrite ^/(.*)/([Uu][^/]+\.rpm)$ /$1/Packages/u/$2 last;
      rewrite ^/(.*)/([Xx][^/]+\.rpm)$ /$1/Packages/x/$2 last;
      rewrite ^/(.*)/([Jj][^/]+\.rpm)$ /$1/Packages/j/$2 last;
      rewrite ^/(.*)/([Vv][^/]+\.rpm)$ /$1/Packages/v/$2 last;
      rewrite ^/(.*)/([Ww][^/]+\.rpm)$ /$1/Packages/w/$2 last;
      rewrite ^/(.*)/([Zz][^/]+\.rpm)$ /$1/Packages/z/$2 last;
      rewrite ^/(.*)/([Yy][^/]+\.rpm)$ /$1/Packages/y/$2 last;
      rewrite ^/(.*)/([0-9])([^/]+\.rpm)$ /$1/Packages/$2/$2$3 last;
    }

    location /nginx_status {
        access_log off;
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }
  
    location / {
        proxy_pass http://pulpcontent;
    }
}