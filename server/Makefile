include .env
SHELL := /bin/bash

# Deliberately not "lazy evaluation"
ifeq ($(origin PULP_PASSWORD), undefined)
	PULP_PASSWORD := $(shell openssl rand -base64 12)
endif

PULP_DATABASES__default__PASSWORD ?= $(shell openssl rand -base64 12)
PULP_SECRET ?= $(shell openssl rand -base64 50)
PULP_SYMMETRIC_KEY ?= $(shell openssl rand -base64 32)
POSTGRES_PASSWORD ?= $(shell openssl rand -base64 12)
APP_CLIENT_ID ?= 1ce02e3e-1bf3-4d28-8cdc-e921f824399d
TENANT_ID ?= 72f988bf-86f1-41af-91ab-2d7cd011db47
PULP_AZURE_ACCOUNT_NAME ?= none
PULP_AZURE_ACCOUNT_KEY ?= none

# Deliberately not pulled from process environment
LEGACY_KEY_THUMBPRINT = $(shell gpg --show-keys .test.key | head -n 2 | tail -n 1 | tail -c 17)

.PHONY: help run build rebuild down teardown update reset migrate shell lint dbconsole clear_env rebuild_env

default: help

.env::			## generate an .env file from .env.example
	@echo "Creating .env file"
	@echo ${PULP_SYMMETRIC_KEY} > ../pulp/.pulp_symmetric_key
	@./setvalues.py -s .env.example .env PULP_PASSWORD "${PULP_PASSWORD}" \
	PULP_ADMIN_PASSWORD "${PULP_PASSWORD}" \
	PULP_DATABASES__default__PASSWORD "${PULP_DATABASES__default__PASSWORD}" PULP_SECRET "${PULP_SECRET}" \
	POSTGRES_PASSWORD "${POSTGRES_PASSWORD}" APP_CLIENT_ID "${APP_CLIENT_ID}" TENANT_ID "${TENANT_ID}" \
	LEGACY_KEY_THUMBPRINT "${LEGACY_KEY_THUMBPRINT}"

env.storage::			## generate environment for storage if creds are in the environment
ifeq ($(PULP_AZURE_ACCOUNT_KEY),none)
	@echo "Using container-mounted storage"
	@echo '# Generated by Makefile, deliberately left blank' > .env.storage
else
	@echo "Using Azure storage account ${PULP_AZURE_ACCOUNT_NAME}"
	@./setvalues.py -s .env.storage.template .env.storage PULP_AZURE_ACCOUNT_NAME "${PULP_AZURE_ACCOUNT_NAME}" \
	PULP_AZURE_ACCOUNT_KEY "${PULP_AZURE_ACCOUNT_KEY}"
endif

clear_env:			## wipe files generated by the .env command
	@echo "Destroying current environment files"
	-rm -f .env ../pulp/.pulp_symmetric_key

rebuild_env:		## wipe and rebuild the env
	@make clear_env
	@make .env

regen_test_key:		## wipe and regenerate the test keys used to do legacy signing in dev
	-rm .test.keys
	-rm .test.pub
	mkdir gpg_home
	gpg --homedir gpg_home --batch --generate-key .test_key_config
	gpg --homedir gpg_home --armor --export > .test.pub
	gpg --homedir gpg_home --armor --export-secret-keys > .test.key
	rm -rf gpg_home

grant_access:		## allow our dev principal access to the application
	../cli/update_role.sh Account_Admin --create

reset_rebuild:	teardown regen_test_key rebuild_env rebuild grant_access  ## reset and rebuild everything

build_pulp:			## build and locally tag the pulp image
	docker build pulp/ --pull --tag localhost/pulp:stable

run: env.storage		## run the containers
	docker compose up -d
	-docker exec -it pulp-worker bash -c '/usr/local/bin/pulpcore-manager add-signing-service "legacy_yum" /sign_cli/sign_legacy.py "$$(gpg --show-keys /sign_cli/msopentech.asc | head -n 2 | tail -n 1 | tail -c 17)"'
	-docker exec -it pulp-worker bash -c '/usr/local/bin/pulpcore-manager add-signing-service "legacy_apt" /sign_cli/sign_legacy_apt.py --class deb:AptReleaseSigningService "$$(gpg --show-keys /sign_cli/msopentech.asc | head -n 2 | tail -n 1 | tail -c 17)"'
	docker exec -it pmcserver alembic upgrade head

build: env.storage		## build the container images
	docker compose build

rebuild: env.storage		## rebuild the container images and run them
	docker compose up -d --build
	-docker exec -it pulp-worker bash -c '/usr/local/bin/pulpcore-manager add-signing-service "legacy_yum" /sign_cli/sign_legacy.py "$$(gpg --show-keys /sign_cli/msopentech.asc | head -n 2 | tail -n 1 | tail -c 17)"'
	-docker exec -it pulp-worker bash -c '/usr/local/bin/pulpcore-manager add-signing-service "legacy_apt" /sign_cli/sign_legacy_apt.py --class deb:AptReleaseSigningService "$$(gpg --show-keys /sign_cli/msopentech.asc | head -n 2 | tail -n 1 | tail -c 17)"'
	docker exec -it pmcserver alembic upgrade head

down:				## stop and remove the containers
	docker compose down

teardown: down		## stop the containers and remove the container volumes
	-for vol in pulp_storage postgres-data containers; do \
		docker volume rm pmcserver_$$vol ; \
	done

update: env.storage		## pull the latest images and run the containers
	docker compose pull
	docker compose up -d
	docker exec -it pmcserver alembic upgrade head

reset: teardown env.storage	## remove container volumes and restart containers
	docker compose up -d
	docker exec -it pmcserver alembic upgrade head

migrate:			## apply any database migrations to the api container
	docker exec -it pmcserver alembic upgrade head

shell:				## open a bash console to the api container
	docker exec -it pmcserver /bin/bash

lint: run			## run the lint checks in the api container
	docker exec -it pmcserver flake8 .
	docker exec -it pmcserver isort -c .
	docker exec -it pmcserver black --check .
	docker exec -it pmcserver mypy .

format: run			## format code using formatters black and isort
	docker exec -it pmcserver isort .
	docker exec -it pmcserver black .

dbconsole:			## open a psql console and connect to the database
	docker exec -it db psql -U ${POSTGRES_USER}

help:
	@echo 'usage: make [target] ...'
	@echo
	@echo 'targets:'
	@gawk '/^\S.*:.*##/ { print gensub(/^([[:alnum:]\.]+):.*##\s+(.*)/, "\\1: \\2", "g") }' $(MAKEFILE_LIST)
