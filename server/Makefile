include .env
SHELL := /bin/bash
PULP_ADMIN_PASSWORD ?= $(shell openssl rand -base64 12)
PULP_DATABASES__default__PASSWORD ?= $(shell openssl rand -base64 12)
PULP_SECRET ?= $(shell openssl rand -base64 50)
PULP_SYMMETRIC_KEY ?= $(shell openssl rand -base64 32)
POSTGRES_PASSWORD ?= $(shell openssl rand -base64 12)
APP_CLIENT_ID ?= 1ce02e3e-1bf3-4d28-8cdc-e921f824399d
TENANT_ID ?= 72f988bf-86f1-41af-91ab-2d7cd011db47

.PHONY: help run build rebuild down teardown update reset migrate shell lint dbconsole

default: help

.env:				## generate an .env file from .env.example
	@echo "Creating .env file"
	cp .env.example .env
	@echo ${PULP_SYMMETRIC_KEY} > ./pulp/.pulp_symmetric_key
	@sed -i 's#PULP_\(ADMIN_\)\?PASSWORD=""#PULP_\1PASSWORD="${PULP_ADMIN_PASSWORD}"#' .env
	@sed -i 's#PULP_DATABASES__default__PASSWORD=""#PULP_DATABASES__default__PASSWORD="${PULP_DATABASES__default__PASSWORD}"#' .env
	@sed -i 's#PULP_SECRET=""#PULP_SECRET="${PULP_SECRET}"#' .env
	@sed -i 's#POSTGRES_PASSWORD=""#POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"#' .env
	@sed -i 's#APP_CLIENT_ID=""#APP_CLIENT_ID="${APP_CLIENT_ID}"#' .env
	@sed -i 's#TENANT_ID=""#TENANT_ID="${TENANT_ID}"#' .env

clear_env:			## wipe files generated by the .env command
	@echo "Destroying current environment files"
	-rm .env
	-rm ./pulp/.pulp_symmetric_key

rebuild_env:		## wipe and rebuild the env
	make clear_env
	make .env

grant_access:		## allow our dev principal access to the application
	../cli/update_role.sh Account_Admin --create

reset_rebuild:	teardown rebuild_env rebuild grant_access	## reset and rebuild everything

run:				## run the containers
	docker compose up -d
	docker exec -it pmcserver alembic upgrade head

build:				## build the container images
	docker compose build

rebuild:			## rebuild the container images and run them
	docker compose up -d --build
	docker exec -it pmcserver alembic upgrade head

down:				## stop and remove the containers
	docker compose down

teardown: down		## stop the containers and remove the container volumes
	-for vol in pulp_storage pgsql containers postgres-data; do \
		docker volume rm pmcserver_$$vol ; \
	done

update:				## pull the latest images and run the containers
	docker compose pull
	docker compose up -d
	docker exec -it pmcserver alembic upgrade head

reset: teardown		## remove container volumes and restart containers
	docker compose up -d
	docker exec -it pmcserver alembic upgrade head

migrate:			## apply any database migrations to the api container
	docker exec -it pmcserver alembic upgrade head

shell:				## open a bash console to the api container
	docker exec -it pmcserver /bin/bash

lint: run			## run the lint checks in the api container
	docker exec -it pmcserver flake8 .
	docker exec -it pmcserver isort -c .
	docker exec -it pmcserver black --check .
	docker exec -it pmcserver mypy .

format: run			## format code using formatters black and isort
	docker exec -it pmcserver isort .
	docker exec -it pmcserver black .

dbconsole:			## open a psql console and connect to the database
	docker exec -it db psql -U ${POSTGRES_USER}

help:
	@echo 'usage: make [target] ...'
	@echo
	@echo 'targets:'
	@gawk '/^\S.*:.*##/ { print gensub(/^([[:alnum:]\.]+):.*##\s+(.*)/, "\\1: \\2", "g") }' $(MAKEFILE_LIST)
