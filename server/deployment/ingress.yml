# A Word About AKS/Kubernetes Ingress Controllers
#
# Kubernetes really wants you to terminate TLS by defining an "Ingress Controller", which is a
# container running one of many possible services (nginx is one), and adding an "Ingress" yml entry
# that defines in a service-agnostic way how it should be configured. There is a community-
# maintained "ingress-nginx" Ingress Controller, which all the docs tell you to just pull and use.
# It is just an nginx service with a bunch of other scripts built in for translating the Ingress
# yaml into an actual nginx config file, and allowing for easy control (smart shutdown, etc) of the
# service. However pulling that would violate Microsoft's supply-chain security policy.
#
# There is a Mariner-based nginx container image available. For now at least let's just use that,
# write its config the old fashioned way, and point the external IPs at it. This is apparently what
# the Serial Console team does as well.
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-settings
data:
  ssl-content.conf: |
    upstream pulpcontent {
        server pulp-content-internal:80; # The pulp-content LoadBalancer
    }

    # Instruct nginx to publish logs to stderr / stdout so kubernetes can capture them.
    error_log  stderr warn;
    access_log  /dev/stdout main;

    server { # Server to handle incoming requests for the content
        listen              80;
        listen              443 ssl; # 'ssl' parameter tells NGINX to decrypt the traffic
        server_name         $destination_env;
        ssl_certificate     /mnt/secrets/$content_cert_name;
        ssl_certificate_key /mnt/secrets/$content_cert_name;

        # Use strong ssl security config from: https://sslscanner/Implementation.aspx
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA;
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        client_max_body_size 3G;

        location ~ ^/config/ {
          proxy_pass http://pulpcontent;
        }

        location ~ .*/Packages/.*\.rpm$ {
          proxy_pass http://pulpcontent;
        }

        location ~ .*\.rpm$ {
          rewrite ^/(.*)/([Mm][^/]+\.rpm)$ /$1/Packages/m/$2 last;
          rewrite ^/(.*)/([Pp][^/]+\.rpm)$ /$1/Packages/p/$2 last;
          rewrite ^/(.*)/([Dd][^/]+\.rpm)$ /$1/Packages/d/$2 last;
          rewrite ^/(.*)/([Ll][^/]+\.rpm)$ /$1/Packages/l/$2 last;
          rewrite ^/(.*)/([Cc][^/]+\.rpm)$ /$1/Packages/c/$2 last;
          rewrite ^/(.*)/([Aa][^/]+\.rpm)$ /$1/Packages/a/$2 last;
          rewrite ^/(.*)/([Kk][^/]+\.rpm)$ /$1/Packages/k/$2 last;
          rewrite ^/(.*)/([Rr][^/]+\.rpm)$ /$1/Packages/r/$2 last;
          rewrite ^/(.*)/([Gg][^/]+\.rpm)$ /$1/Packages/g/$2 last;
          rewrite ^/(.*)/([Ss][^/]+\.rpm)$ /$1/Packages/s/$2 last;
          rewrite ^/(.*)/([Oo][^/]+\.rpm)$ /$1/Packages/o/$2 last;
          rewrite ^/(.*)/([Qq][^/]+\.rpm)$ /$1/Packages/q/$2 last;
          rewrite ^/(.*)/([Hh][^/]+\.rpm)$ /$1/Packages/h/$2 last;
          rewrite ^/(.*)/([Nn][^/]+\.rpm)$ /$1/Packages/n/$2 last;
          rewrite ^/(.*)/([Bb][^/]+\.rpm)$ /$1/Packages/b/$2 last;
          rewrite ^/(.*)/([Tt][^/]+\.rpm)$ /$1/Packages/t/$2 last;
          rewrite ^/(.*)/([Ee][^/]+\.rpm)$ /$1/Packages/e/$2 last;
          rewrite ^/(.*)/([Ff][^/]+\.rpm)$ /$1/Packages/f/$2 last;
          rewrite ^/(.*)/([Ii][^/]+\.rpm)$ /$1/Packages/i/$2 last;
          rewrite ^/(.*)/([Uu][^/]+\.rpm)$ /$1/Packages/u/$2 last;
          rewrite ^/(.*)/([Xx][^/]+\.rpm)$ /$1/Packages/x/$2 last;
          rewrite ^/(.*)/([Jj][^/]+\.rpm)$ /$1/Packages/j/$2 last;
          rewrite ^/(.*)/([Vv][^/]+\.rpm)$ /$1/Packages/v/$2 last;
          rewrite ^/(.*)/([Ww][^/]+\.rpm)$ /$1/Packages/w/$2 last;
          rewrite ^/(.*)/([Zz][^/]+\.rpm)$ /$1/Packages/z/$2 last;
          rewrite ^/(.*)/([Yy][^/]+\.rpm)$ /$1/Packages/y/$2 last;
          rewrite ^/(.*)/([0-9])([^/]+\.rpm)$ /$1/Packages/$2/$2$3 last;
        }

        location /nginx_status {
            access_log off;
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        location / {
            proxy_pass http://pulpcontent;
        }
    }
  ssl-api.conf: |
    upstream pmcserver {
        server pmc-service-internal:80; # The pmc-service LoadBalancer
    }    

    # Instruct nginx to publish logs to stderr / stdout so kubernetes can capture them.
    error_log  stderr warn;
    log_format custom 'nginx-api [$time_local] - [$http_x_correlation_id]: "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log  /dev/stdout custom;

    server { # Server to handle incoming requests for the api
        listen              443 ssl; # 'ssl' parameter tells NGINX to decrypt the traffic
        server_name         $api_hostname;
        ssl_certificate     /mnt/secrets/$api_cert_name;
        ssl_certificate_key /mnt/secrets/$api_cert_name;

        # Use strong ssl security config from: https://sslscanner/Implementation.aspx
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA;
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        client_max_body_size 3G;

        location /nginx_status {
            access_log off;
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }

        location / {
            proxy_pass http://pmcserver;
            proxy_read_timeout 300s;
        }
    }
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: tls-secret-provider
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: $CLIENT_ID
    keyvaultName: $kv
    # objectType must be "secret" so that we can fetch the private key.
    objects: |
      array:
        - |
          objectName: $api_cert_name
          objectType: secret
        - |
          objectName: $content_cert_name
          objectType: secret
    tenantId: $AZURE_TENANT_ID
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-content
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-content
  template:
    metadata:
      labels:
        app: nginx-content
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: nginx-content
        image: mcr.microsoft.com/cbl-mariner/base/nginx:1
        resources:
          requests:
            cpu: 1000m
            memory: 3Gi
          limits:
            cpu: 1000m
        ports:
          - containerPort: 80
            name: http
          - containerPort: 443
            name: https
        readinessProbe:
          exec:
            command:
              - "curl"
              - "localhost/nginx_status"
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - name: tls-secrets-volume
          mountPath: "/mnt/secrets"
          readOnly: true
        - name: ssl-conf-volume
          mountPath: "/etc/nginx/nginx.conf.default"
          subPath: nginx.conf.default
          readOnly: true
        envFrom:
          - configMapRef:
              name: pmc-settings
      volumes:
        - name: tls-secrets-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "tls-secret-provider"
        - name: ssl-conf-volume
          configMap:
            name: nginx-settings
            items:
              - key: ssl-content.conf
                path: nginx.conf.default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-api
  template:
    metadata:
      labels:
        app: nginx-api
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: nginx-api
        image: mcr.microsoft.com/cbl-mariner/base/nginx:1
        resources:
          requests:
            cpu: 1000m
            memory: 3Gi
          limits:
            cpu: 1000m
        ports:
          - containerPort: 443
            name: https
        readinessProbe:
          exec:
            command:
              - "curl"
              - "--insecure"
              - "https://localhost/nginx_status"
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - name: tls-secrets-volume
          mountPath: "/mnt/secrets"
          readOnly: true
        - name: ssl-conf-volume
          mountPath: "/etc/nginx/nginx.conf.default"
          subPath: nginx.conf.default
          readOnly: true
      volumes:
        - name: tls-secrets-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "tls-secret-provider"
        - name: ssl-conf-volume
          configMap:
            name: nginx-settings
            items:
              - key: ssl-api.conf
                path: nginx.conf.default
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-content
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-content
  minReplicas: $min_pulp_content
  maxReplicas: 10
  targetCPUUtilizationPercentage: 40
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-api
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 40
---
apiVersion: v1
kind: Service
metadata:
  name: pmc-service
spec:
  type: LoadBalancer
  ports:
  - port: 443
  selector:
    app: nginx-api
---
apiVersion: v1
kind: Service
metadata:
  name: pulp-content
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: http
  - port: 443
    name: https
  selector:
    app: nginx-content
