# These variables need to be defined with default values **prior to** the if block so that they are
# in scope later on when used.
{{  $mdsd_auth_vol := "keyvault-auth-vol" -}}
{{- $mdm_auth_vol := "keyvault-auth-vol" -}}
{{- $azsecpack_auth_vol := "keyvault-auth-vol" -}}
{{- if .Values.csiSecretProvider }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: geneva-kvcert
  namespace: {{ .Release.Namespace }}
spec:
  provider: azure
  parameters:
    usePodIdentity: {{ .Values.csiSecretProvider.use_pod_identity | quote }}
    useVMManagedIdentity: {{ .Values.csiSecretProvider.use_msi | quote }}
    {{- if and .Values.csiSecretProvider.use_msi .Values.cert.msi_client_id }}
    userAssignedIdentityID: {{ .Values.cert.msi_client_id | quote }}
    {{- end }}
    keyvaultName: {{ .Values.cert.keyvaultName | quote }}
    # cloudName: "AzurePublicCloud"
    objects:  |
      array:
        - |
          objectName: {{ .Values.cert.genevaCertName | quote }}
          objectType: secret
          objectAlias: {{ .Values.cert.pemFileName }}
    tenantId: {{ .Values.cert.tenantId | quote }}
---
{{ else }} {{- /* else block for "if .Values.csiSecretProvider" */ -}}
{{- $mdsd_auth_vol = "mdsd-auth-vol" -}}
{{- $mdm_auth_vol = "mdm-auth-vol" -}}
{{- $azsecpack_auth_vol = "azsecpack-auth-vol" -}}
apiVersion: v1
kind: Secret
metadata:
  name: mdsd-auth
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  gcscert.pem: {{ .Values.gcscert.pem | b64enc }}
  gcskey.pem: {{ .Values.gcskey.pem | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: mdm-auth
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  mdm-cert.pem: {{ .Values.gcscert.pem | b64enc }}
  mdm-key.pem: {{ .Values.gcskey.pem | b64enc }}
{{- if not .Values.secpack.exclude }}
---
apiVersion: v1
kind: Secret
metadata:
  name: azsecpack-auth
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  azsecpack-cert.pem: {{ .Values.gcscert.pem | b64enc }}
  azsecpack-key.pem: {{ .Values.gcskey.pem | b64enc }}
{{- end}}
---
{{- end }} {{- /* if block for "if .Values.csiSecretProvider" */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-conf
  namespace: {{ .Release.Namespace }}
data:
  kubernetes.conf: {{ .Files.Get "fluentd/kubernetes.conf" | quote }}
  fluentd.conf: {{ .Values.fluentd.conf | quote }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: geneva-services
  namespace: {{ .Release.Namespace }}
  labels:
    app: geneva-services
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: geneva-services
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        name: geneva-services
    spec:
      hostNetwork: true
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
        # MDSD
        - name: mdsd
          image: linuxgeneva-microsoft.azurecr.io/genevamdsd:{{ .Values.mdsd.dockerTag }}
          env:
          {{- if .Values.csiSecretProvider }}
          - name: MDSD_AKV_CERTIFICATE_STORE_PATH
            value: /geneva/geneva_auth
          - name: MONITORING_GCS_AUTH_ID_TYPE
            value: AuthKeyVault
          - name: MDSD_DAEMON_TEMPORARY_ELEVATION_DISABLED
            value: "true"
          - name: MONITORING_GCS_AUTH_ID
            value: {{ .Values.cert.genevaCertSAN | quote }}
          {{- end }}
          - name: TENANT
            value: {{ .Values.gcs_region | quote }}
          - name: ROLE
            value: {{ .Values.gcs_account | quote }}
          - name: ROLEINSTANCE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MONITORING_TENANT
            value: {{ .Values.gcs_region | quote }}
          - name: MONITORING_ROLE
            value: {{ .Values.gcs_account | quote }}
          - name: MONITORING_ROLE_INSTANCE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MONITORING_GCS_ENVIRONMENT
            value: {{ .Values.gcs_environment | quote }}
          - name: MONITORING_GCS_ACCOUNT
            value: {{ .Values.gcs_account | quote }}
          - name: MONITORING_GCS_REGION
            value: {{ .Values.gcs_region | quote }}
          - name: MONITORING_GCS_NAMESPACE
            value: {{ .Values.gcs_namespace | quote }}
          - name: MONITORING_CONFIG_VERSION
            value: {{ .Values.gcs_config_version | quote }}
          - name: DOCKER_LOGGING
            value: "true"
          volumeMounts:
            - name: {{ $mdsd_auth_vol }}
              mountPath: /geneva/geneva_auth
              readOnly: true
            - name: var-log-geneva-services-vol
              mountPath: /geneva/geneva_logs
            - name: mdsd-run-vol
              mountPath: /var/run/mdsd
        # FluentD
        - name: fluentd
          image: linuxgeneva-microsoft.azurecr.io/genevafluentd_td-agent:{{ .Values.fluentd.dockerTag }}
          env:
            - name: FLUENTD_CONF
              value: /etc/fluentd/fluentd.conf
          volumeMounts:
            - name: fluentd-conf-vol
              mountPath: /etc/fluentd
            - name: fluentd-buffer-vol
              mountPath: "/var/log/td-agent"
            - name: mdsd-run-vol
              mountPath: "/var/run/mdsd"
            - name: docker-log-vol
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: var-log-vol
              mountPath: /var/log
            - name: run-journal-vol
              mountPath: /run/log/journal
              readOnly: true
        # MDM
        - name: mdm
          image: linuxgeneva-microsoft.azurecr.io/genevamdm:{{ .Values.mdm.dockerTag }}
          env:
          - name: MDM_ACCOUNT
            value: {{ .Values.gcs_metrics_account | quote }}
          {{- if .Values.metricEndpoint }}
          - name: METRIC_ENDPOINT
            value: {{ .Values.metricEndpoint | quote }}
          {{- end }}
          - name: MDM_INPUT
            value: statsd_udp
          - name: MDM_LOG_LEVEL
            value: "Info"
          {{- if .Values.csiSecretProvider }}
          - name: CERT_FILE
            value: /tmp/geneva_mdm/{{ .Values.cert.pemFileName }}
          - name: KEY_FILE
            value: /tmp/geneva_mdm/{{ .Values.cert.pemFileName }}
          {{- end }}
          volumeMounts:
            - name: {{ $mdm_auth_vol }}
              mountPath: /tmp/geneva_mdm
              readOnly: true
        {{- if not .Values.secpack.exclude }}
        # This container will initialize and start the Azure Security Pack
        # on the host machine and validate that it is running.  It will fail
        # if it can not run correctly
        - name: azsecpack-initializer
          image: linuxgeneva-microsoft.azurecr.io/genevasecpackinstall:{{ .Values.secpack.dockerTag }}
          imagePullPolicy: Always
          env:
            {{- if .Values.csiSecretProvider }}
            - name: AzSecPack_Mdsd_Akv_Certificate_Store_Path
              value: /secrets
            - name: AzSecPack_GCS_Auth_ID_Type
              value: AuthKeyVault
            - name: AzSecPack_Auth_ID
              value: {{ .Values.cert.genevaCertSAN | quote }}
            {{- else }}
            - name: AzSecPack_GCS_cert
              value: /secrets/azsecpack-cert.pem
            - name: AzSecPack_GCS_key
              value: /secrets/azsecpack-key.pem
            {{- end }}
            - name: AzSecPack_GCS_Environment
              value: {{ .Values.gcs_environment | quote }}
            - name: AzSecPack_GCS_Account
              value: {{ .Values.gcs_account | quote }}
            - name: AzSecPack_EventVersion
              value: {{ .Values.azsecpack_eventversion | quote }}
            - name: AzSecPack_Timestamp
              value: '2019-01-28T00:00:00Z'
            - name: AzSecPack_Namespace
              value: {{ .Values.gcs_namespace | quote }}
            - name: AzSecPack_Moniker
              value: {{ .Values.azsecpackmoniker | quote }}
            - name: AzSecPack_Tenant
              value: {{ .Values.gcs_region | quote }}
            - name: AzSecPack_Role
              value: {{ .Values.gcs_account | quote }}
            - name: AzSecPack_RoleInstance
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AzSecPack_MachineName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
              # This needs to be set to 1 in order to not exit the container
              # unless there is an error or the AzSecPack fails
            - name: AzSecPack_MonitorForFailure
              value: '1'
          volumeMounts:
            - mountPath: /host
              name: azsecpack-host
              readOnly: false
            - mountPath: /secrets
              name: {{ $azsecpack_auth_vol }}
              readOnly: true
        {{- end }}
      volumes:
        {{- if .Values.csiSecretProvider }}
        - name: keyvault-auth-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: geneva-kvcert
        {{- else }}
        - name: mdsd-auth-vol
          secret:
            secretName: mdsd-auth
        - name: mdm-auth-vol
          secret:
            secretName: mdm-auth
        {{- if not .Values.secpack.exclude }}
        - name: azsecpack-auth-vol
          secret:
            secretName: azsecpack-auth
        {{- end }}
        {{- end }}
        - name: mdsd-run-vol
          emptyDir: {}
        - name: fluentd-conf-vol
          configMap:
            name: fluentd-conf
        - name: fluentd-buffer-vol
          emptyDir: {}
        {{- if not .Values.secpack.exclude }}
        - name: azsecpack-host
          hostPath:
            path: /
        {{- end }}
        - name: docker-log-vol
          hostPath:
            path: /var/lib/docker/containers
        - name: run-journal-vol
          hostPath:
            path: /run/log/journal
        - name: var-log-vol
          hostPath:
            path: /var/log
        - name: var-log-geneva-services-vol
          hostPath:
            path: /var/log/geneva-services
        - name: etw-vol
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: geneva-services
  namespace: {{ .Release.Namespace }}
  labels:
    app: geneva-services
spec:
  type: ClusterIP
  ports:
    - name: mdm-statsd-udp
      protocol: UDP
      port: 8125
      targetPort: 8125
  selector:
    name: geneva-services
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: geneva-reader
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: geneva-read-global
subjects:
  - kind: ServiceAccount
    name: default
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: geneva-reader
  apiGroup: rbac.authorization.k8s.io
